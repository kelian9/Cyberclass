{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport '../common/styles/common.scss';\nimport AppLayout from '../components/layouts/AppLayout/AppLayout';\nimport { useState, useEffect } from 'react';\nimport { Provider } from 'react-redux';\nimport getStore from '../store/store';\nimport { useRouter } from 'next/router';\nimport withRedux from \"next-redux-wrapper\";\n\nconst makeStore = (initialState, options) => {\n  return getStore();\n};\n\nexport const App = ({\n  Component,\n  pageProps,\n  store\n}) => {\n  const router = useRouter();\n  const {\n    0: pageWidth,\n    1: setPageWidth\n  } = useState(0);\n  const {\n    0: activeHandle,\n    1: setActiveHandle\n  } = useState(false);\n  useEffect(() => {\n    router.pathname === '/' ? router.push('/main') : null;\n\n    if (!activeHandle) {\n      setPageWidth(document.body.clientWidth);\n\n      document.body.onresize = () => {\n        setPageWidth(document.body.clientWidth);\n      };\n\n      setActiveHandle(true);\n    }\n  });\n  return __jsx(Provider, {\n    store: store\n  }, router.pathname != '/authorization' && !router.pathname.includes('/registration') ? __jsx(AppLayout, {\n    store: store\n  }, __jsx(Component, _extends({\n    store: store\n  }, pageProps, {\n    pageWidth: pageWidth\n  }))) : __jsx(Component, _extends({\n    store: store\n  }, pageProps, {\n    pageWidth: pageWidth\n  })));\n};\nexport default withRedux((initialState, options) => getStore())(App);","map":null,"metadata":{},"sourceType":"module"}